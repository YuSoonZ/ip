package theadvisor;

import java.io.IOException;
import java.io.Serializable;
import java.time.DateTimeException;
import java.time.LocalDateTime;

/**
 * TheAdvisor class represents the main application that manages tasks.
 * It interacts with the user interface, task list, and storage to handle user commands.
 */
public class TheAdvisor implements Serializable {
    private static final String FILE_PATH = "list.bin";

    private Ui ui;

    private Storage storage;

    private TaskList taskList;

    /**
     * Constructs a new TheAdvisor instance with default settings.
     */
    public TheAdvisor() {
        this.ui = new Ui();
        this.storage = new Storage(FILE_PATH);
        try {
            taskList = storage.loadList();
            if (taskList == null) {
                taskList = new TaskList();
            }
        } catch (IOException err) {
            System.out.println("No list found, creating empty task list");
            taskList = new TaskList();
        } catch (ClassNotFoundException err) {
            System.out.println("Class mismatch. Check and try again");
            taskList = new TaskList();
        }
    }

    /**
     * Processes the user input and returns the appropriate response.
     *
     * @param req The user input string.
     * @return The response generated by the application.
     */
    public String getResponse(String req) {
        String[] strings = req.split(" ");
        Parser.Prompts prompt = Parser.parsePrompt(strings[0]);
        String response = "";
        try {
            switch (prompt) {
            case BYE:
                response = ui.goodbye();
                break;
            case LIST:
                response = ui.printList(taskList);
                break;
            case MARK:
                if (checkArrayLength(2, strings)) {
                    int markNumber = Integer.parseInt(strings[1]);
                    response = taskList.markTask(markNumber - 1);
                    storage.saveTasks(taskList);
                } else {
                    response = "Invalid format. Make sure that the format is: "
                            + "mark + (number) to mark something on the list as completed.";
                }
                break;
            case UNMARK:
                if (checkArrayLength(2, strings)) {
                    int unmarkNumber = Integer.parseInt(strings[1]);
                    response = taskList.unmarkTask(unmarkNumber - 1);
                    storage.saveTasks(taskList);
                } else {
                    response = "Invalid format. Make sure that the format is: "
                            + "unmark + (number) to unmark something on the list.";
                }
                break;
            case DELETE:
                if (checkArrayLength(2, strings)) {
                    int deleteNumber = Integer.parseInt(strings[1]);
                    response = taskList.deleteFromList(deleteNumber - 1);
                    storage.saveTasks(taskList);
                } else {
                    response = "Invalid format. Make sure that the format is: "
                               + "delete + (number) to delete something from the list.";
                }
                break;
            case TODO:
                String todo = req.substring(4);
                if (!checkEmptyDescription(todo)) {
                    ToDos toDos = new ToDos(todo);
                    response = taskList.addToList(toDos);
                    storage.saveTasks(taskList);
                } else {
                    response = "The description for todo cannot be empty. "
                            + "The input should be <todo> + description";
                }
                break;
            case DEADLINE:
                String due = req.substring(8);
                String[] arrTask = due.split(" /by ");
                if (checkArrayLength(2, arrTask)) {
                    try {
                        Deadline deadline = new Deadline(arrTask[0], LocalDateTime.parse(arrTask[1],
                                Task.INPUT_FORMAT));
                        response = taskList.addToList(deadline);
                        storage.saveTasks(taskList);
                    } catch (DateTimeException e) {
                        throw new TheAdvisorException("Incorrect format of your timestamp! "
                                + "Please input YYYY-MM-DD HHmm");
                    }
                } else {
                    response = "Invalid deadline format. Please use the correct format: deadline + description + /by +"
                            + " <YYYY-MM-DD HHmm>";
                }
                break;
            case EVENT:
                String event = req.substring(5);
                String[] eventArr = event.split(" /from ");
                if (checkArrayLength(2, eventArr)) {
                    String[] timings = eventArr[1].split(" /to");
                    String startStr = timings[0].trim();
                    String endStr = timings[1].trim();
                    try {
                        LocalDateTime start = LocalDateTime.parse(startStr, Task.INPUT_FORMAT);
                        LocalDateTime end = LocalDateTime.parse(endStr, Task.INPUT_FORMAT);
                        Events events = new Events(eventArr[0], start, end);
                        response = taskList.addToList(events);
                        storage.saveTasks(taskList);
                    } catch (DateTimeException e) {
                        throw new TheAdvisorException("Incorrect format of your timestamp! "
                                + "Please input YYYY-MM-DD HHmm");
                    }
                } else {
                    response = "Invalid event format. "
                            + "The input should be <event> + description + /from <YYYY-MM-DD HHmm> + "
                            + "/to <YYYY-MM-DD HHmm>";
                }
                break;
            case FIND:
                String keyword = req.substring(5);
                if (!checkEmptyDescription(keyword)) {
                    response = taskList.findItem(keyword);
                } else {
                    response = "Please key in the keyword of what you wish "
                            + "to find please!";
                }
                break;
            case WRONG:
                response = "Incorrect prompt use. Please try again with these prompts: "
                        + "todo, list, mark, unmark, bye, event, deadline, find";
                break;
            case WRONG:
                response = "Incorrect prompt use. Please try again with these prompts: "
                        + "todo, list, mark, unmark, bye, event, deadline, find";
                break;
            default:
                throw new TheAdvisorException("Incorrect input, please try again with the correct input of either: "
                        + "todo, event, mark...etc");
            }
        } catch (TheAdvisorException e) {
            System.out.println("Error: " + e.getMessage());
        }
        return response;
    }

    private static boolean checkEmptyDescription(String description) {
        return description.isEmpty();
    }

    private static boolean checkArrayLength(int expectedLength, String... array) {
        return array.length == expectedLength;
    }
}
